#include <SPI.h>
#include <Ethernet.h>

#include "DHT.h"

#define DHTPIN 8     // what pin we're connected to
#define DHTTYPE DHT22   // DHT 22  (AM2302)
#define fan 4

//This arduino is assigned to this room number
String roomNumber = "H.01";

//The path for the POST endpoint
String controllerPath = "/api/Arduino/Save";

float h; //Humidity
float t; //Temperature

int lightVal; //Used for storing the light value from the photoresistor
int lightCal;
bool HasLight;

int maxHum = 60;
int maxTemp = 40;

DHT dht(DHTPIN, DHTTYPE); //Create DHT object



// Enter a MAC address for your controller below.
// Newer Ethernet shields have a MAC address printed on a sticker on the shield
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };

// if you don't want to use DNS (and reduce your sketch size)
// use the numeric IP instead of the name for the server:
String serverIp = "192.168.1.115";
IPAddress server(192,168,1,115);
unsigned int portNumber = 48935; 

// Set the static IP address
IPAddress ip(192, 168, 1, 112);
IPAddress myDns(192, 168, 1, 1);

// Initialize the Ethernet client library
EthernetClient client;

// Variables to measure the speed
unsigned long beginMicros, endMicros;
unsigned long byteCount = 0;
bool printWebData = true;  // set to false for better speed measurement

void setup() {
  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  lightCal = analogRead(A5); //Initial reading of light level
  
  StartTempAndHumid();
  // start the Ethernet connection:
    Ethernet.begin(mac, ip, myDns);
  // give the Ethernet shield a second to initialize:
  delay(1000);
  Serial.print("connecting to ");
  Serial.print(server);
  Serial.println("...");

  // if you get a connection, report back via serial:
  beginMicros = micros();
}

void loop() {
  ReadTempAndHumidity();
  ReadPhotoResistor();
  PostRequest(String(t), String(h), String(HasLight)); //Do Post request
  // if there are incoming bytes available
  // from the server, read them and print them:
  int len = client.available();
  if (len > 0) {
    byte buffer[80];
    if (len > 80) len = 80;
    client.read(buffer, len);
    if (printWebData) {
      Serial.write(buffer, len); // show in the serial monitor (slows some boards)
    }
    byteCount = byteCount + len;
  }

  //Show statistical data about the amount of data received, over a period of time
  // if the server's disconnected, stop the client:
  if (!client.connected()) {
    endMicros = micros();
    Serial.println();
    Serial.println("disconnecting.");
    client.stop();
    Serial.print("Received ");
    Serial.print(byteCount);
    Serial.print(" bytes in ");
    float seconds = (float)(endMicros - beginMicros) / 1000000.0;
    Serial.print(seconds, 4);
    float rate = (float)byteCount / seconds / 1000.0;
    Serial.print(", rate = ");
    Serial.print(rate);
    Serial.print(" kbytes/second");
    Serial.println();
  }
  delay(15000);
}


void PostRequest(String temperature,String humidity,String light){
  String queryString = "?temperature=" + temperature + "&humidity=" + humidity + "&light=" + light + "&roomnumber="+roomNumber;

  Serial.println("This is what is sent " + controllerPath + String(queryString)+ serverIp+ ":" + String(portNumber));
    //Connect at the port we use
    if (client.connect(server, portNumber)) {
    Serial.print("connected to ");
    Serial.println(client.remoteIP());
    // Make a HTTP request:
        int length = sizeof(queryString);
    client.println("POST "+ controllerPath + String(queryString) + " HTTP/1.1");
    client.println("Host: " + serverIp+ ":" + String(portNumber));
    client.println("Content-Length:" + String(length));
    client.println("Connection: close");
    client.println();
  } else {
    // if you didn't get a connection to the server:
    //Serial.println("connection failed");
  }
}

void StartTempAndHumid(){
  pinMode(fan, OUTPUT);
  dht.begin();
}

void ReadPhotoResistor(){
  //Take a reading using analogRead() on sensor pin and store it in lightVal
  lightVal = analogRead(A5);


  //if lightVal is less than our initial reading (lightCal) minus 50 it is dark and
  //turn pin 9 HIGH. The (-50) part of the statement sets the sensitivity. The smaller
  //the number the more sensitive the circuit will be to variances in light.
  if (lightVal < lightCal - 50)
  {
    HasLight = false;
  }

  //else, it is bright, turn pin 9 LOW
  else
  {
    HasLight = true;
  }
}

void ReadTempAndHumidity(){

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  h = dht.readHumidity();
  // Read temperature as Celsius
  t = dht.readTemperature();
  
  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
  
  if(h > maxHum || t > maxTemp) {
      digitalWrite(fan, HIGH);
  } else {
     digitalWrite(fan, LOW); 
  }
  
  Serial.print("Humidity: "); 
  Serial.print(h);
  Serial.print(" %\t");
  Serial.print("Temperature: "); 
  Serial.print(t);
  Serial.println(" *C ");

}